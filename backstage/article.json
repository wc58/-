{
  "code": 0,
  "msg": "",
  "count": 30,
  "data": [
    {
      "id": 1,
      "title": "Java （计算机编程语言）",
      "assistant": "java就此而诞生",
      "picture": "https://www.yanshisan.cn/image/cover/2019122812254868.png",
      "content": "<h1>一号</h1><h2>二号</h2><h3>三号</h3><h4>四号</h4><h5>五号</h5>",
      "author": "百度词条",
      "status": "转载",
      "del": "0",
      "createTime": "2020-14-09 02:07:14",
      "updateTime": "2020-14-30 02:07:19"
    },
    {
      "id": 2,
      "title": "Python （计算机程序设计语言）",
      "assistant": "",
      "picture": "",
      "content": "<h1>这里是图片测试</h1><p><img src=\"https://wssf.oss-cn-beijing.aliyuncs.com/article/2020/07/18/e3e3e39a-ab68-43c0-b7da-4ba6a54bf2dbabout.jpg\" style=\"max-width:100%;\"><br></p><h1>这是代码测试（java）</h1><pre><code>/**<br>     * 文章图片<br>     *<br>     * @param files<br>     * @return<br>     */<br>    @PostMapping(\"uploadPictures\")<br>    @ResponseBody<br>    public Map&lt;String, Object&gt; uploadPictures(@RequestParam(\"article\") MultipartFile[] files) {<br>        String bucketName = propertiesUtils.getBucketName();<br>        String endpoint = propertiesUtils.getEndpoint();<br>        OSS oss = getOss();<br>        HashMap&lt;String, Object&gt; map = new HashMap&lt;&gt;();<br>        ArrayList&lt;String&gt; paths = new ArrayList&lt;&gt;();<br>        try {<br>            for (MultipartFile file : files) {<br>                //文件路径加名称<br>                String filename = \"article\" + \"/\" + new DateTime().toString(\"yyyy/MM/dd\") + \"/\" + UUID.randomUUID().toString() + file.getOriginalFilename();//设置日期格式<br>                InputStream inputStream = file.getInputStream();<br>                oss.putObject(bucketName, filename, inputStream);<br>                String filePath = \"https://\" + bucketName + \".\" + endpoint + \"/\" + filename;<br>                paths.add(filePath);<br>            }<br>        } catch (IOException e) {<br>            e.printStackTrace();<br>            map.put(\"errno\", 1);<br>        }<br>        map.put(\"errno\", 0);<br>        map.put(\"data\", paths);<br>        return map;<br>    }</code></pre><h1>这是</h1>",
      "author": "百度词条",
      "status": "转载",
      "del": "0",
      "createTime": "2020-14-09 02:09:49",
      "updateTime": "2020-14-11 02:09:51"
    },
    {
      "id": 3,
      "title": "帅哥",
      "assistant": "",
      "picture": "https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1594374787486&di=504254cb0f8032168744a5d8308fd7a7&imgtype=0&src=http%3A%2F%2Fa3.att.hudong.com%2F14%2F75%2F01300000164186121366756803686.jpg",
      "content": "<pre><code>@RequestMapping(\"reply\")\r\n    @ResponseBody\r\n    public R reply(Comment comment) {\r\n        if (comment.getPid() == null)\r\n            comment.setPid(0);\r\n        try {\r\n            commentService.addReply(comment);\r\n            //评论数加一\r\n            otherService.commentSizeAdd(comment.getArticleId());\r\n            //点击量减一\r\n            otherService.flowMinus(comment.getArticleId());\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            return R.ERROR();\r\n        }\r\n        return R.OK();\r\n    }\r\n</code></pre>",
      "author": "往事随风",
      "status": "借鉴",
      "del": "0",
      "createTime": "2020-14-09 02:10:37",
      "updateTime": "2020-14-22 02:10:40"
    },
    {
      "id": 4,
      "title": "美女",
      "assistant": "需要和duorder需需要和duorder需要和duorder和duorder需需要和duorder和duordersql中排序倒序使用baidesc关键字，一般需要和duorder by 合用，示例sql语句如下：sql中排序倒序使用baidesc关键字，一般需要和duorder by 合用，示例sql语句如下：sql中排序倒序使用baidesc关键字，一般需要和duorder by 合用，示例sql语句如下：",
      "picture": "https://www.yanshisan.cn/image/cover/201853014484278.jpg",
      "content": "<pre><code>&lt;div class=&quot;layui-fluid&quot;&gt;\r\n            &lt;div class=&quot;layui-row layui-col-space15&quot;&gt;\r\n                &lt;div class=&quot;layui-col-md12&quot;&gt;\r\n                    &lt;div class=&quot;layui-card&quot;&gt;\r\n                        &lt;div class=&quot;layui-card-body &quot;&gt;\r\n                            &lt;form class=&quot;layui-form layui-col-space5&quot;&gt;\r\n                                \r\n                                &lt;div class=&quot;layui-inline layui-show-xs-block&quot;&gt;\r\n                                    &lt;input type=&quot;text&quot; name=&quot;username&quot;  placeholder=&quot;分类名&quot; autocomplete=&quot;off&quot; class=&quot;layui-input&quot;&gt;\r\n                                &lt;/div&gt;\r\n                                &lt;div class=&quot;layui-inline layui-show-xs-block&quot;&gt;\r\n                                    &lt;button class=&quot;layui-btn&quot;  lay-submit=&quot;&quot; lay-filter=&quot;sreach&quot;&gt;&lt;i class=&quot;layui-icon&quot;&gt;&lt;/i&gt;增加&lt;/button&gt;\r\n                                &lt;/div&gt;\r\n                            &lt;/form&gt;\r\n                        &lt;/div&gt;\r\n                        &lt;div class=&quot;layui-card-header&quot;&gt;\r\n                            &lt;button class=&quot;layui-btn layui-btn-danger&quot; onclick=&quot;delAll()&quot;&gt;&lt;i class=&quot;layui-icon&quot;&gt;&lt;/i&gt;批量删除&lt;/button&gt;\r\n                        &lt;/div&gt;\r\n                        &lt;div class=&quot;layui-card-body &quot;&gt;\r\n                            &lt;table class=&quot;layui-table layui-form&quot;&gt;\r\n                                &lt;thead&gt;\r\n                                  &lt;tr&gt;\r\n                                    &lt;th&gt;\r\n                                     &lt;input type=&quot;checkbox&quot; name=&quot;&quot;  lay-skin=&quot;primary&quot;&gt;\r\n                                    &lt;/th&gt;\r\n                                    &lt;th&gt;ID&lt;/th&gt;\r\n                                    &lt;th&gt;分类名&lt;/th&gt;\r\n                                    &lt;th&gt;操作&lt;/th&gt;\r\n                                &lt;/thead&gt;\r\n                                &lt;tbody&gt;\r\n                                  &lt;tr&gt;\r\n                                    &lt;td&gt;\r\n                                      &lt;input type=&quot;checkbox&quot; name=&quot;&quot;  lay-skin=&quot;primary&quot;&gt;\r\n                                    &lt;/td&gt;\r\n                                    &lt;td&gt;1&lt;/td&gt;\r\n                                    &lt;td&gt;会员相关&lt;/td&gt;\r\n                                    &lt;td class=&quot;td-manage&quot;&gt;\r\n                                      &lt;a title=&quot;编辑&quot;  onclick=&quot;xadmin.open(&#x27;编辑&#x27;,&#x27;admin-edit.html&#x27;)&quot; href=&quot;javascript:;&quot;&gt;\r\n                                        &lt;i class=&quot;layui-icon&quot;&gt;&amp;#xe642;&lt;/i&gt;\r\n                                      &lt;/a&gt;\r\n                                      &lt;a title=&quot;删除&quot; onclick=&quot;member_del(this,&#x27;要删除的id&#x27;)&quot; href=&quot;javascript:;&quot;&gt;\r\n                                        &lt;i class=&quot;layui-icon&quot;&gt;&amp;#xe640;&lt;/i&gt;\r\n                                      &lt;/a&gt;\r\n                                    &lt;/td&gt;\r\n                                  &lt;/tr&gt;\r\n                                &lt;/tbody&gt;\r\n                              &lt;/table&gt;\r\n                        &lt;/div&gt;\r\n                        &lt;div class=&quot;layui-card-body &quot;&gt;\r\n                            &lt;div class=&quot;page&quot;&gt;\r\n                                &lt;div&gt;\r\n                                  &lt;a class=&quot;prev&quot; href=&quot;&quot;&gt;&amp;lt;&amp;lt;&lt;/a&gt;\r\n                                  &lt;a class=&quot;num&quot; href=&quot;&quot;&gt;1&lt;/a&gt;\r\n                                  &lt;span class=&quot;current&quot;&gt;2&lt;/span&gt;\r\n                                  &lt;a class=&quot;num&quot; href=&quot;&quot;&gt;3&lt;/a&gt;\r\n                                  &lt;a class=&quot;num&quot; href=&quot;&quot;&gt;489&lt;/a&gt;\r\n                                  &lt;a class=&quot;next&quot; href=&quot;&quot;&gt;&amp;gt;&amp;gt;&lt;/a&gt;\r\n                                &lt;/div&gt;\r\n                            &lt;/div&gt;\r\n                        &lt;/div&gt;\r\n                    &lt;/div&gt;\r\n                &lt;/div&gt;\r\n            &lt;/div&gt;\r\n        &lt;/div&gt; </code></pre>",
      "author": "往事随风",
      "status": "自创",
      "del": "0",
      "createTime": "2020-14-09 02:12:15",
      "updateTime": "2020-14-24 02:12:17"
    },
    {
      "id": 5,
      "title": "大叔",
      "assistant": "小心点进来，可能会吓着你",
      "picture": "https://www.yanshisan.cn/image/cover/2019122812254868.png",
      "content": "<h1>这里是图片测试</h1><p><br></p><pre><code>/**<br>     * 文章图片<br>     *<br>     * @param files<br>     * @return<br>     */<br>    @PostMapping(\"uploadPictures\")<br>    @ResponseBody<br>    public Map&lt;String, Object&gt; uploadPictures(@RequestParam(\"article\") MultipartFile[] files) {<br>        String bucketName = propertiesUtils.getBucketName();<br>        String endpoint = propertiesUtils.getEndpoint();<br>        OSS oss = getOss();<br>        HashMap&lt;String, Object&gt; map = new HashMap&lt;&gt;();<br>        ArrayList&lt;String&gt; paths = new ArrayList&lt;&gt;();<br>        try {<br>            for (MultipartFile file : files) {<br>                //文件路径加名称<br>                String filename = \"article\" + \"/\" + new DateTime().toString(\"yyyy/MM/dd\") + \"/\" + UUID.randomUUID().toString() + file.getOriginalFilename();//设置日期格式<br>                InputStream inputStream = file.getInputStream();<br>                oss.putObject(bucketName, filename, inputStream);<br>                String filePath = \"https://\" + bucketName + \".\" + endpoint + \"/\" + filename;<br>                paths.add(filePath);<br>            }<br>        } catch (IOException e) {<br>            e.printStackTrace();<br>            map.put(\"errno\", 1);<br>        }<br>        map.put(\"errno\", 0);<br>        map.put(\"data\", paths);<br>        return map;<br>    }</code></pre><p><iframe src=\"//player.bilibili.com/player.html?aid=371387418&amp;bvid=BV1rZ4y1u76A&amp;cid=213363532&amp;page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe></p><p><br></p>",
      "author": "往事随风",
      "status": "自创",
      "del": "0",
      "createTime": "2020-14-09 02:13:06",
      "updateTime": "2020-14-11 02:13:08"
    },
    {
      "id": 7,
      "title": "模板分享",
      "assistant": "重新整理了下模板（首页，文章列表，阅读文章，留言板，友链）",
      "picture": "https://www.yanshisan.cn/Blog/Read/12",
      "content": "重新整理了下模板（首页，文章列表，阅读文章，留言板，友链），日记和关于页面不打算整理，因为没什么整理的[污]，有需要的可以看看。\r\n\r\n地址：https://gitee.com/yssgit/yan_shisan_blog_template.git\r\n\r\n重新整理了下模板（首页，文章列表，阅读文章，留言板，友链），日记和关于页面不打算整理，因为没什么整理的[污]，有需要的可以看看。\r\n\r\n地址：https://gitee.com/yssgit/yan_shisan_blog_template.git\r\n\r\n重新整理了下模板（首页，文章列表，阅读文章，留言板，友链），日记和关于页面不打算整理，因为没什么整理的[污]，有需要的可以看看。\r\n\r\n地址：https://gitee.com/yssgit/yan_shisan_blog_template.git",
      "author": "燕十三",
      "status": "转载",
      "del": "0",
      "createTime": "2020-20-11 08:54:01",
      "updateTime": "2020-20-08 08:54:06"
    },
    {
      "id": 9,
      "title": "我的第一个C/S项目",
      "assistant": "FastReport.Net是一款适用于Windows Forms, ASP.NET和MVC框架的功能齐全的报表分析解决方案，支持.Net Framework 2.0到4.x。",
      "picture": "https://www.yanshisan.cn/Blog/Read/20",
      "content": "我一直是做B/S的，这次记录一下我着手开发的第一个C/S报表设计打印程序；\r\n\r\n我的这个FastReport.Net不是免费的，是公司花钱买的，有需求的可以了解一下找找看有不有免费版的\r\n\r\nFastReport介绍：\r\n\r\n    通过内置脚本实现交互分析与数据处理  \r\n\r\n    多数据源支持\r\n\r\n    方便的报表打印与输出  \r\n\r\n    容量小、速度快\r\n\r\n    支持导入和导出RDL格式的图表  \r\n\r\n    丰富的报表元素\r\n\r\n    强大的可扩展性\r\n\r\n    支持水晶报表转换  \r\n\r\n    强大的可视化设计器  ",
      "author": "燕十三",
      "status": "转载",
      "del": "0",
      "createTime": "2020-20-11 08:57:41",
      "updateTime": "2020-20-11 08:57:44"
    },
    {
      "id": 10,
      "title": "MUI上拉加载和下拉刷新出现双滚动条BUG解决办法",
      "assistant": "滚动组件与刷新容器之双滚动条解决方案",
      "picture": "https://www.yanshisan.cn/Blog/Read/19",
      "content": "在使用MUI开发APP时，所有需要上拉下拉的地方都需要初始化，代码如下：\r\n\r\nvar deceleration = mui.os.ios ? 0.003 : 0.0009;\r\nmui('.mui-scroll-wrapper').scroll({\r\n\tbounce: false,\r\n\tindicators: true, //是否显示滚动条\r\n\tdeceleration: deceleration",
      "author": "燕十三",
      "status": "转载",
      "del": "0",
      "createTime": "2020-20-11 08:58:42",
      "updateTime": "2020-20-18 08:58:44"
    },
    {
      "id": 11,
      "title": "MUI动态加载组件",
      "assistant": "第一次使用MUI框架，还是遇到好多问题，记录一下比较有用的一些问题点。",
      "picture": "https://www.yanshisan.cn/Blog/Read/18",
      "content": "一、关于MUI Slider动态加载不能滑动的解决办法：\r\n\r\n1.动态生成以下代码\r\n\r\n<div id=\"slider\" class=\"mui-slider mui-fullscreen\">\r\n\t<div id=\"sliderSegmentedControl\" class=\"mui-scroll-wrapper mui-slider-indicator mui-segmented-control mui-segmented-control-inverted\">\r\n\t\t<div class=\"mui-scroll\">\r\n\t\t\t<a class=\"mui-control-item mui-active\" href=\"#item1mobile\">区域1</a>\r\n\t\t\t<a class=\"mui-control-item\" href=\"#item2mobile\">区域2</a>\r\n\t\t\t<a class=\"mui-control-item\" href=\"#item3mobile\">区域3</a>\r\n\t\t\t<a class=\"mui-control-item\" href=\"#item4mobile\">区域4</a>\r\n\t\t\t<a class=\"mui-control-item\" href=\"#item5mobile\">区域5</a>\r\n\t\t</div>\r\n\t</div>\r\n</div>",
      "author": "燕十三",
      "status": "转载",
      "del": "0",
      "createTime": "2020-20-11 08:59:47",
      "updateTime": "2020-20-17 08:59:50"
    },
    {
      "id": 12,
      "title": " .NET Spire.Doc组件",
      "assistant": "Spire.Doc for .NET是一款由E-iceblue公司开发的专业的Word .NET类库，使用该工具开发人员可以在任意.NET平台（C#，VB.NET，ASP.NET）上快速创建，读取，写入，转换，打印Word文档。作为一个独立的Word 组件，Spire.Doc的运行无需安装Microsoft Word。而且，它可以将Microsoft Word文档创建功能集成到开发者的任何.NET应用程序。",
      "picture": "https://www.yanshisan.cn/Blog/Read/16",
      "content": "最近做项目需要操作Word，用到了Spire.Doc组件，感觉很方便分享一下。\r\n\r\n安装方法：直接在NuGet包管理器里面搜索下载安装",
      "author": "燕十三",
      "status": "转载",
      "del": "0",
      "createTime": "2020-21-11 09:00:53",
      "updateTime": "2020-21-12 09:00:56"
    },
    {
      "id": 13,
      "title": " MUI框架-快速开发APP",
      "assistant": "性能和体验的差距，一直是mobile app开发者放弃HTML5的首要原因 而MUI可以方便开发出高性能的APP，它很多控件都是原生态的效果，是目前最接近原生App效果的框架",
      "picture": "https://www.yanshisan.cn/Blog/Read/14",
      "content": "最近公司准备开始做APP了，又不想招人[污]，经过讨论，我们打算使用MUI来做，这款号称最接近原生APP的开发框架。\r\n\r\nMUI-GITHUB地址：https://github.com/dcloudio/mui\r\n\r\nMUI文档：http://dev.dcloud.net.cn/mui/ui/  （中文文档看起来不费力[坏笑]） \r\n\r\nMUI特点：\r\n\r\n1.轻量\r\n\r\n追求性能体验，是我们开始启动MUI项目的首要目标，轻量必然是重要特征；\r\n\r\nMUI不依赖任何第三方JS库，压缩后的JS和CSS文件仅有100+K和60+K\r\n\r\n2.原生UI",
      "author": "燕十三",
      "status": "转载",
      "del": "0",
      "createTime": "2020-21-11 09:09:02",
      "updateTime": "2020-21-11 09:09:22"
    },
    {
      "id": 14,
      "title": "mui2018最新版QQ音乐api调用mui",
      "assistant": "最近在想背景音乐怎么做，放在我服务器感觉很吃力，就想到使用链接达到效果，期间研究了网易云，没过多久就失效了。 现在看了看QQ音乐，这篇博客给的很详细，采纳了一下",
      "picture": "https://www.yanshisan.cn/Blog/Read/9",
      "content": "下载QQ音乐任意歌曲方法：\r\n\r\n1.首先在QQ音乐任意播放页面",
      "author": "燕十三",
      "status": "转载",
      "del": "0",
      "createTime": "2020-21-11 09:09:05",
      "updateTime": "2020-21-11 09:09:24"
    },
    {
      "id": 15,
      "title": "逆mui水寒",
      "assistant": "都是充话费送的天空，为什么逆水寒的就能这么厉害?",
      "picture": "https://www.yanshisan.cn/Blog/Read/13",
      "content": "最近听到传闻，说这江湖要变天了！ \r\n\r\n吓得我赶紧收拾细软准备跑路。\r\n\r\n原来江湖所谓的“变天”，是开发组在游戏里实装了一个叫“truesky”的功能插件，\r\n\r\n可以逼真的模拟细微的天气变化，以后多云转晴、中雨转阴都会变成基本操作。\r\n\r\n但恕我逆小寒愚钝，没见过世面的我理解不了这个功能有多厉害。",
      "author": "燕十三",
      "status": "转载",
      "del": "0",
      "createTime": "2020-21-11 09:09:07",
      "updateTime": "2020-21-31 09:09:25"
    },
    {
      "id": 16,
      "title": "使用码云和VS托管本地代码",
      "assistant": "以前自己写的一些小项目和demo我都是备份到百度云盘，每次有更新都需要打包重新上传，很麻烦。 现在我们可以选择GitHub或者码云来托管我们的本地项目",
      "picture": "https://www.yanshisan.cn/Blog/Read/11",
      "content": "可能是因为网页加载速度的问题，我还是选择了码云来做项目托管 \r\n\r\n工具：\r\n\r\nVisual Studio 2017 \r\n\r\nGIt\r\n\r\n1.登陆码云新建项目",
      "author": "燕十三",
      "status": "转载",
      "del": "0",
      "createTime": "2020-21-11 09:09:10",
      "updateTime": "2020-21-11 09:09:27"
    },
    {
      "id": 17,
      "title": "NPOI导入导出Excel",
      "assistant": "NPOI是指构建在POI 3.x版本之上的一个程序，NPOI可以在没有安装Office的情况下对Word或Excel文档进行读写操作。 NPOI是一个开源的C#读写Excel、WORD等微软OLE2组件文档的项目。",
      "picture": "https://www.yanshisan.cn/Blog/Read/8",
      "content": "最近在项目上有需求要自定义导出列，想起以前用过的NPOI做过的导入导出就拿来做了些修改然后记录一下，声明全局静态方法：\r\n\r\n1.导入excel到DataTable\r\n\r\n        /// <summary>\r\n        /// 将excel导入到datatable\r\n        /// </summary>\r\n        /// <param name=\"filePath\">excel路径</param>\r\n        /// <param name=\"isColumnName\">第一行是否是列名</param>\r\n        /// <returns>返回datatable</returns>\r\n        public static DataTable ExcelToDataTable(string filePath, bool isColumnName)\r\n        {",
      "author": "燕十三",
      "status": "转载",
      "del": "0",
      "createTime": "2020-21-11 09:09:12",
      "updateTime": "2020-21-02 09:09:29"
    },
    {
      "id": 18,
      "title": "解决百度分享插件不支持https",
      "assistant": "对于建立自己的网站我是第一次，很多问题都是现查的，记录一下发布站点路上遇到的一些问题。",
      "picture": "https://www.yanshisan.cn/Blog/Read/7",
      "content": "我的文章分享用的是百度的分享插件2.0，但是今天在把站点改为https后发现分享插件不能正确加载，以下是百度分享 HTTPS 版的解决方案：\r\n\r\n1、下载百度分享的源文件：https://github.com/hrwhisper/baiduShare\r\n\r\n2、将源文件复制到网站根目录，如：https://www.yanshisan.cn/static/api\r\n\r\n3、将JavaScript的地址改为本地地址  （根据实际情况修改）\r\n\r\nwindow._bd_share_config = {\r\n        common: { bdPic: $(\".f-qq\").attr(\"cover\") }, share: [{\r\n            \"bdSize\": 32\r\n        }]",
      "author": "燕十三",
      "status": "转载",
      "del": "0",
      "createTime": "2020-21-11 09:09:14",
      "updateTime": "2020-21-11 09:09:35"
    },
    {
      "id": 19,
      "title": "ASP.NET MVC Cookie修改无效",
      "assistant": "记开发本站遇到的坑，修改cookie的值后，再次获取却还是上一次的值解决方案。",
      "picture": "https://www.yanshisan.cn/Blog/Read/6",
      "content": "在决定网站才用邮件的形式回复消息后就需要用户补填邮箱信息了，我用的cookie存的用户资料，想要在用户补填邮箱后更新cookie。\r\n\r\n刚开始是这样设置的：",
      "author": "燕十三",
      "status": "转载",
      "del": "0",
      "createTime": "2020-21-11 09:09:16",
      "updateTime": "2020-20-15 08:09:39"
    },
    {
      "id": 64,
      "title": "日志",
      "assistant": "日志是我们开发中经常使用的，也为我们的排错提供非常大的帮助",
      "picture": "https://wssf.oss-cn-beijing.aliyuncs.com/cover/2020/07/19/d4b696d7-0e44-42a2-a4cc-846f02992e045754e29a6d13e.jpg",
      "content": "<h2><span style=\"font-size: medium;\">一、配置日志级别</span></h2><p cid=\"n3\" mdtype=\"paragraph\"><span md-inline=\"tab\">\t</span><span md-inline=\"plain\">日志记录器（Logger）的行为分等级的，分别为：OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL级别</span></p><p cid=\"n4\" mdtype=\"paragraph\"><span md-inline=\"tab\">\t</span><span md-inline=\"plain\"> 默认情况下，spring boot从控制台打印出来的日志级别只有INFO及以上级别，可以配置日志级别</span></p><pre spellcheck=\"false\" lang=\"properties\" cid=\"n5\" mdtype=\"fences\"><span role=\"presentation\"># 设置日志级别</span><br><span role=\"presentation\">logging.level.root=WARN</span></pre><p cid=\"n6\" mdtype=\"paragraph\"></p><h2 cid=\"n7\" mdtype=\"heading\"><span md-inline=\"plain\">二、Logback日志</span></h2><p cid=\"n8\" mdtype=\"paragraph\"><span md-inline=\"plain\">spring boot内部使用Logback作为日志实现的框架，Logback和log4j非常相似。</span></p><h3 cid=\"n9\" mdtype=\"heading\"><span md-inline=\"plain\">1、配置logback日志</span></h3><p cid=\"n10\" mdtype=\"paragraph\"><span md-inline=\"tab\">\t</span><span md-inline=\"plain\">删除application.properties中的日志配置</span></p><p cid=\"n11\" mdtype=\"paragraph\"><span md-inline=\"tab\">\t</span><span md-inline=\"plain\">安装idea彩色日志插件：grep-console</span></p><p cid=\"n12\" mdtype=\"paragraph\"><span md-inline=\"tab\">\t</span><span md-inline=\"plain\">resource中创建logback-spring.xml</span></p><pre spellcheck=\"false\" lang=\"xml\" cid=\"n13\" mdtype=\"fences\"><pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;<br>&lt;configuration  scan=\"true\" scanPeriod=\"10 seconds\"&gt;<br>    &lt;!-- 日志级别从低到高分为TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，如果设置为WARN，则低于WARN的信息都不会输出 --&gt;<br>    &lt;!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true --&gt;<br>    &lt;!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 --&gt;<br>    &lt;!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 --&gt;<br>    &lt;contextName&gt;logback&lt;/contextName&gt;<br>    &lt;!-- name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。 --&gt;<br>    &lt;property name=\"log.path\" value=\"D:/guli_log/edu\" /&gt;<br>    &lt;!-- 彩色日志 --&gt;<br>    &lt;!-- 配置格式变量：CONSOLE_LOG_PATTERN 彩色日志格式 --&gt;<br>    &lt;!-- magenta:洋红 --&gt;<br>    &lt;!-- boldMagenta:粗红--&gt;<br>    &lt;!-- cyan:青色 --&gt;<br>    &lt;!-- white:白色 --&gt;<br>    &lt;!-- magenta:洋红 --&gt;<br>    &lt;property name=\"CONSOLE_LOG_PATTERN\"<br>              value=\"%yellow(%date{yyyy-MM-dd HH:mm:ss}) |%highlight(%-5level) |%blue(%thread) |%blue(%file:%line) |%green(%logger) |%cyan(%msg%n)\"/&gt;<br>    &lt;!--输出到控制台--&gt;<br>    &lt;appender name=\"CONSOLE\" class=\"ch.qos.logback.core.ConsoleAppender\"&gt;<br>        &lt;!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息--&gt;<br>        &lt;!-- 例如：如果此处配置了INFO级别，则后面其他位置即使配置了DEBUG级别的日志，也不会被输出 --&gt;<br>        &lt;filter class=\"ch.qos.logback.classic.filter.ThresholdFilter\"&gt;<br>            &lt;level&gt;INFO&lt;/level&gt;<br>        &lt;/filter&gt;<br>        &lt;encoder&gt;<br>            &lt;Pattern&gt;${CONSOLE_LOG_PATTERN}&lt;/Pattern&gt;<br>            &lt;!-- 设置字符集 --&gt;<br>            &lt;charset&gt;UTF-8&lt;/charset&gt;<br>        &lt;/encoder&gt;<br>    &lt;/appender&gt;<br>    &lt;!--输出到文件--&gt;<br>    &lt;!-- 时间滚动输出 level为 INFO 日志 --&gt;<br>    &lt;appender name=\"INFO_FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\"&gt;<br>        &lt;!-- 正在记录的日志文件的路径及文件名 --&gt;<br>        &lt;file&gt;${log.path}/log_info.log&lt;/file&gt;<br>        &lt;!--日志文件输出格式--&gt;<br>        &lt;encoder&gt;<br>            &lt;pattern&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n&lt;/pattern&gt;<br>            &lt;charset&gt;UTF-8&lt;/charset&gt;<br>        &lt;/encoder&gt;<br>        &lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;<br>        &lt;rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"&gt;<br>            &lt;!-- 每天日志归档路径以及格式 --&gt;<br>            &lt;fileNamePattern&gt;${log.path}/info/log-info-%d{yyyy-MM-dd}.%i.log&lt;/fileNamePattern&gt;<br>            &lt;timeBasedFileNamingAndTriggeringPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\"&gt;<br>                &lt;maxFileSize&gt;100MB&lt;/maxFileSize&gt;<br>            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;<br>            &lt;!--日志文件保留天数--&gt;<br>            &lt;maxHistory&gt;15&lt;/maxHistory&gt;<br>        &lt;/rollingPolicy&gt;<br>        &lt;!-- 此日志文件只记录info级别的 --&gt;<br>        &lt;filter class=\"ch.qos.logback.classic.filter.LevelFilter\"&gt;<br>            &lt;level&gt;INFO&lt;/level&gt;<br>            &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;<br>            &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;<br>        &lt;/filter&gt;<br>    &lt;/appender&gt;<br>    &lt;!-- 时间滚动输出 level为 WARN 日志 --&gt;<br>    &lt;appender name=\"WARN_FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\"&gt;<br>        &lt;!-- 正在记录的日志文件的路径及文件名 --&gt;<br>        &lt;file&gt;${log.path}/log_warn.log&lt;/file&gt;<br>        &lt;!--日志文件输出格式--&gt;<br>        &lt;encoder&gt;<br>            &lt;pattern&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n&lt;/pattern&gt;<br>            &lt;charset&gt;UTF-8&lt;/charset&gt; &lt;!-- 此处设置字符集 --&gt;<br>        &lt;/encoder&gt;<br>        &lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;<br>        &lt;rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"&gt;<br>            &lt;fileNamePattern&gt;${log.path}/warn/log-warn-%d{yyyy-MM-dd}.%i.log&lt;/fileNamePattern&gt;<br>            &lt;timeBasedFileNamingAndTriggeringPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\"&gt;<br>                &lt;maxFileSize&gt;100MB&lt;/maxFileSize&gt;<br>            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;<br>            &lt;!--日志文件保留天数--&gt;<br>            &lt;maxHistory&gt;15&lt;/maxHistory&gt;<br>        &lt;/rollingPolicy&gt;<br>        &lt;!-- 此日志文件只记录warn级别的 --&gt;<br>        &lt;filter class=\"ch.qos.logback.classic.filter.LevelFilter\"&gt;<br>            &lt;level&gt;warn&lt;/level&gt;<br>            &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;<br>            &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;<br>        &lt;/filter&gt;<br>    &lt;/appender&gt;<br>    &lt;!-- 时间滚动输出 level为 ERROR 日志 --&gt;<br>    &lt;appender name=\"ERROR_FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\"&gt;<br>        &lt;!-- 正在记录的日志文件的路径及文件名 --&gt;<br>        &lt;file&gt;${log.path}/log_error.log&lt;/file&gt;<br>        &lt;!--日志文件输出格式--&gt;<br>        &lt;encoder&gt;<br>            &lt;pattern&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n&lt;/pattern&gt;<br>            &lt;charset&gt;UTF-8&lt;/charset&gt; &lt;!-- 此处设置字符集 --&gt;<br>        &lt;/encoder&gt;<br>        &lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;<br>        &lt;rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"&gt;<br>            &lt;fileNamePattern&gt;${log.path}/error/log-error-%d{yyyy-MM-dd}.%i.log&lt;/fileNamePattern&gt;<br>            &lt;timeBasedFileNamingAndTriggeringPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\"&gt;<br>                &lt;maxFileSize&gt;100MB&lt;/maxFileSize&gt;<br>            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;<br>            &lt;!--日志文件保留天数--&gt;<br>            &lt;maxHistory&gt;15&lt;/maxHistory&gt;<br>        &lt;/rollingPolicy&gt;<br>        &lt;!-- 此日志文件只记录ERROR级别的 --&gt;<br>        &lt;filter class=\"ch.qos.logback.classic.filter.LevelFilter\"&gt;<br>            &lt;level&gt;ERROR&lt;/level&gt;<br>            &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;<br>            &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;<br>        &lt;/filter&gt;<br>    &lt;/appender&gt;<br>    &lt;!--<br>        &lt;logger&gt;用来设置某一个包或者具体的某一个类的日志打印级别、以及指定&lt;appender&gt;。<br>        &lt;logger&gt;仅有一个name属性，<br>        一个可选的level和一个可选的addtivity属性。<br>        name:用来指定受此logger约束的某一个包或者具体的某一个类。<br>        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，<br>              如果未设置此属性，那么当前logger将会继承上级的级别。<br>    --&gt;<br>    &lt;!--<br>        使用mybatis的时候，sql语句是debug下才会打印，而这里我们只配置了info，所以想要查看sql语句的话，有以下两种操作：<br>        第一种把&lt;root level=\"INFO\"&gt;改成&lt;root level=\"DEBUG\"&gt;这样就会打印sql，不过这样日志那边会出现很多其他消息<br>        第二种就是单独给mapper下目录配置DEBUG模式，代码如下，这样配置sql语句会打印，其他还是正常DEBUG级别：<br>     --&gt;<br>    &lt;!--开发环境:打印控制台--&gt;<br>    &lt;springProfile name=\"dev\"&gt;<br>        &lt;!--可以输出项目中的debug日志，包括mybatis的sql日志--&gt;<br>        &lt;logger name=\"com.guli\" level=\"INFO\" /&gt;<br>        &lt;!--<br>            root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性<br>            level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，默认是DEBUG<br>            可以包含零个或多个appender元素。<br>        --&gt;<br>        &lt;root level=\"INFO\"&gt;<br>            &lt;appender-ref ref=\"CONSOLE\" /&gt;<br>            &lt;appender-ref ref=\"INFO_FILE\" /&gt;<br>            &lt;appender-ref ref=\"WARN_FILE\" /&gt;<br>            &lt;appender-ref ref=\"ERROR_FILE\" /&gt;<br>        &lt;/root&gt;<br>    &lt;/springProfile&gt;<br>    &lt;!--生产环境:输出到文件--&gt;<br>    &lt;springProfile name=\"pro\"&gt;<br>        &lt;root level=\"INFO\"&gt;<br>            &lt;appender-ref ref=\"CONSOLE\" /&gt;<br>            &lt;appender-ref ref=\"DEBUG_FILE\" /&gt;<br>            &lt;appender-ref ref=\"INFO_FILE\" /&gt;<br>            &lt;appender-ref ref=\"ERROR_FILE\" /&gt;<br>            &lt;appender-ref ref=\"WARN_FILE\" /&gt;<br>        &lt;/root&gt;<br>    &lt;/springProfile&gt;<br>&lt;/configuration&gt;</code></pre></pre><h3 cid=\"n14\" mdtype=\"heading\"><span md-inline=\"plain\">2、将错误日志输出到文件</span></h3><p cid=\"n15\" mdtype=\"paragraph\"><span md-inline=\"tab\">\t</span><span md-inline=\"plain\">在异常处理器类上天添加注解</span></p><pre spellcheck=\"false\" lang=\"java\" cid=\"n16\" mdtype=\"fences\"><span role=\"presentation\"> @Slf4j</span></pre><p cid=\"n17\" mdtype=\"paragraph\"><span md-inline=\"tab\">\t</span><span md-inline=\"plain\"> 异常输出语句 </span></p><pre spellcheck=\"false\" lang=\"java\" cid=\"n18\" mdtype=\"fences\"><span role=\"presentation\"> log.error(e.getMessage());</span></pre><p><br></p>",
      "author": "超哥",
      "status": "专题",
      "del": "0",
      "createTime": "2020-18-19 06:08:24",
      "updateTime": "2020-18-19 06:09:57"
    },
    {
      "id": 65,
      "title": "a",
      "assistant": "a",
      "picture": "https://wssf.oss-cn-beijing.aliyuncs.com/cover/2020/07/19/e3e07290-37f1-471e-9941-eab9c65d8c785754e29a6d13e.jpg",
      "content": "<p>afdsafsafsadfsadfsad</p>",
      "author": "超哥",
      "status": "a",
      "del": "0",
      "createTime": "2020-21-19 09:26:36",
      "updateTime": "2020-21-19 09:26:36"
    }
  ],
  "totalRow": {
    "score": "666",
    "experience": "999"
  }
}

